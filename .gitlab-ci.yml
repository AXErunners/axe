image: "ubuntu:bionic"

variables:
  DOCKER_DRIVER: overlay2

cache:
  # Cache by branch/tag and job name
  # Gitlab can't use caches from parent pipelines when doing the first build in a PR, so we use artifacts to copy
  # caches into PRs
  key: ${CI_COMMIT_REF_SLUG}-${CI_JOB_NAME}${CI_EXTERNAL_PULL_REQUEST_IID}
  paths:
    - $CI_PROJECT_DIR/cache

stages:
  - builder-image
  - build-depends
  - build

builder-image:
  stage: builder-image
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    - cd ci
    - docker pull $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG || true
    - docker pull $CI_REGISTRY_IMAGE:builder-develop || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG --cache-from $CI_REGISTRY_IMAGE:builder-develop -t $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG -f Dockerfile.builder .
    - docker push $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG

.build-depends-template:
  stage: build-depends
  image: $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG
  variables:
    SDK_URL: https://bitcoincore.org/depends-sources/sdks
    OSX_SDK: "10.11"
    MAKEJOBS: -j4
  before_script:
    - echo HOST=$HOST
    - |
      if [ "$HOST" = "x86_64-apple-darwin11" ]; then
        echo "Downloading MacOS SDK"
        mkdir -p depends/SDKs
        mkdir -p depends/sdk-sources
        if [ ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then
          curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz
        fi
        tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz
      fi
  script:
    - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS
  cache:
    # Let all branches share the same cache, which is ok because the depends subsystem is able to handle this properly (it works with hashes of all scripts)
    key: ${CI_JOB_NAME}
    paths:
      - $CI_PROJECT_DIR/depends/built
      - $CI_PROJECT_DIR/depends/sdk-sources
  artifacts:
    name: depends
    when: on_success
    paths:
      - $CI_PROJECT_DIR/depends/$HOST
      - $CI_PROJECT_DIR/depends/SDKs

.build_template: &build_template
  stage: build
  image: $CI_REGISTRY_IMAGE:builder-$CI_COMMIT_REF_SLUG
  before_script:
    - export BUILD_TARGET="$CI_JOB_NAME"
    - echo BUILD_TARGET=$BUILD_TARGET
    - source ./ci/matrix.sh

    # Init cache
    - export CACHE_DIR=$CI_PROJECT_DIR/cache
    - mkdir -p $CACHE_DIR
    - |
      if [ "$CI_COMMIT_REF_SLUG" != "development" -a "$CI_COMMIT_TAG" == "" ]; then
        if [ ! -d $CACHE_DIR/ccache ]; then
          echo "Downloading cache from development branch"
          mkdir cache-artifact
          cd cache-artifact
          if wget --quiet -O cache-artifact.zip https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/artifacts/development/download?job=$CI_JOB_NAME; then
            unzip -q cache-artifact.zip
            rm cache-artifact.zip
            mv cache-artifact/* $CACHE_DIR/ || true
          else
            echo "Failed to download cache"
          fi
          cd ..
          rm -rf cache-artifact
        else
          echo "Not touching cache (was initialized from previous build)"
        fi
      else
        echo "Not touching cache (building development branch or tag)"
      fi
    # Create missing cache dirs
    - mkdir -p $CACHE_DIR/ccache && mkdir -p $CACHE_DIR/depends && mkdir -p $CACHE_DIR/sdk-sources
    # Keep this as it makes caching related debugging easier
    - ls -lah $CACHE_DIR && ls -lah $CACHE_DIR/depends && ls -lah $CACHE_DIR/ccache

    # Setup some environment variables
    - |
      if [ "$CI_EXTERNAL_PULL_REQUEST_IID" != "" ]; then
        export PULL_REQUEST="true"
      else
        # CI_EXTERNAL_PULL_REQUEST_IID is false every time until https://gitlab.com/gitlab-org/gitlab/issues/5667 is done
        # Until then, we're using https://github.com/brndnmtthws/labhub atm to mirror Github pull requests as branches into Gitlab,
        # which allows us to use Gitlab CI for Github. The following check detects such mirrored branches.
        if [[ $CI_COMMIT_REF_NAME =~ ^pr-[^/]*/[^/]*/[^/]*/[^/]*$ ]]; then
          export PULL_REQUEST="true"
          # CI_COMMIT_BEFORE_SHA is also invalid until #5667 is implemented, so we need to figure it out by ourself
          git fetch origin development
          export CI_COMMIT_BEFORE_SHA="$(git merge-base origin/development HEAD)"
        else
          export PULL_REQUEST="false"
        fi
      fi
    - export COMMIT_RANGE="$CI_COMMIT_BEFORE_SHA..$CI_COMMIT_SHA"
    - export JOB_NUMBER="$CI_JOB_ID"
    - export HOST_SRC_DIR=$CI_PROJECT_DIR
    - echo PULL_REQUEST=$PULL_REQUEST COMMIT_RANGE=$COMMIT_RANGE HOST_SRC_DIR=$HOST_SRC_DIR CACHE_DIR=$CACHE_DIR
    - echo "Commit log:" && git log --format=fuller -1

  script:
    - export BUILD_TARGET="$CI_JOB_NAME"
    - cd $CI_PROJECT_DIR
    - ./ci/build_src.sh
    - ./ci/test_unittests.sh
    - ./ci/test_integrationtests.sh --extended --exclude pruning,dbcrash

  after_script:
    # Copy all cache files into cache-artifact so that they get uploaded. We only do this for development so that artifacts
    # stay minimal for PRs and branches (we never need them)
    - mkdir -p $CI_PROJECT_DIR/cache-artifact
    - mkdir -p $CI_PROJECT_DIR/testlogs
    - |
      if [ "$CI_COMMIT_REF_SLUG" = "development" ]; then
        cp -ra $CI_PROJECT_DIR/cache/* $CI_PROJECT_DIR/cache-artifact/
      fi

  # We're actually only interested in the development branch creating the cache artifact, but there is no way to control this
  # until https://gitlab.com/gitlab-org/gitlab-foss/issues/25478 gets implemented. Until then, we use an expiration time of
  # 3 days and rely on daily builds to refresh the cache artifacts. We also keep non-development artifacts at minimum size
  artifacts:
    name: cache-artifact
    when: always
    paths:
      - $CI_PROJECT_DIR/cache-artifact
      - $CI_PROJECT_DIR/testlogs
    expire_in: 3 days

arm-linux-gnueabihf:
  extends: .build-depends-template
  variables:
    HOST: arm-linux-gnueabihf

i686-w64-mingw32:
  extends: .build-depends-template
  variables:
    HOST: i686-w64-mingw32

x86_64-w64-mingw32:
  extends: .build-depends-template
  variables:
    HOST: x86_64-w64-mingw32

i686-pc-linux-gnu:
  extends: .build-depends-template
  variables:
    HOST: i686-pc-linux-gnu

x86_64-unknown-linux-gnu:
  extends: .build-depends-template
  variables:
    HOST: x86_64-unknown-linux-gnu

x86_64-unknown-linux-gnu-debug:
  extends: .build-depends-template
  variables:
    HOST: x86_64-unknown-linux-gnu
    DEP_OPTS: "DEBUG=1"

x86_64-apple-darwin11:
  extends: .build-depends-template
  variables:
    HOST: x86_64-apple-darwin11

###

arm-linux:
  <<: *build_template
  needs:
    - arm-linux-gnueabihf

win32:
  <<: *build_template
  needs:
    - i686-w64-mingw32

win64:
  <<: *build_template
  needs:
    - x86_64-w64-mingw32

linux32:
  <<: *build_template
  needs:
    - i686-pc-linux-gnu

linux64:
  <<: *build_template
  needs:
    - x86_64-unknown-linux-gnu-debug

linux64_nowallet:
  <<: *build_template
  needs:
    - x86_64-unknown-linux-gnu

linux64_release:
  <<: *build_template
  needs:
    - x86_64-unknown-linux-gnu

mac:
  <<: *build_template
  needs:
    - x86_64-apple-darwin11
